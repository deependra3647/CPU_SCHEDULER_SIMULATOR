import java.util.Scanner;

class Process {
    int pid, arrivalTime, burstTime, priority, completionTime, turnaroundTime, waitingTime, remainingTime;

    Process(int pid, int arrivalTime, int burstTime, int priority) {
        this.pid = pid;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
        this.priority = priority;
        this.remainingTime = burstTime; // Initialize remaining time
    }
}

public class PreemptivePriorityScheduling {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        Process[] processes = new Process[n];

        for (int i = 0; i < n; i++) {
            System.out.print("Enter Arrival Time, Burst Time, and Priority for Process " + (i + 1) + ": ");
            int at = sc.nextInt();
            int bt = sc.nextInt();
            int pr = sc.nextInt();
            processes[i] = new Process(i + 1, at, bt, pr); // Automatically assign process ID
        }

        // Sort processes by arrival time
        java.util.Arrays.sort(processes, (p1, p2) -> Integer.compare(p1.arrivalTime, p2.arrivalTime));

        int currentTime = 0, completed = 0;
        float totalTAT = 0, totalWT = 0;

        System.out.println("\nGantt Chart Execution:");
        
        while (completed < n) {
            int minIndex = -1;
            int minPriority = Integer.MAX_VALUE;

            // Find the process with the highest priority (lowest priority number)
            for (int i = 0; i < n; i++) {
                if (processes[i].remainingTime > 0 && processes[i].arrivalTime <= currentTime) {
                    if (processes[i].priority < minPriority) {
                        minPriority = processes[i].priority;
                        minIndex = i;
                    }
                }
            }

            if (minIndex == -1) {
                // If no process is available, move time forward
                currentTime++;
            } else {
                Process p = processes[minIndex];
                System.out.print(" | P" + p.pid + " ");
                
                // Execute process for 1 unit time (Preemption)
                p.remainingTime--;
                currentTime++;

                if (p.remainingTime == 0) { // If process is completed
                    p.completionTime = currentTime;
                    p.turnaroundTime = p.completionTime - p.arrivalTime;
                    p.waitingTime = p.turnaroundTime - p.burstTime;

                    totalTAT += p.turnaroundTime;
                    totalWT += p.waitingTime;
                    completed++;
                }
            }
        }
        System.out.println(" |");

        // Display process details
        System.out.println("\nPID\tAT\tBT\tPR\tCT\tTAT\tWT");
        for (Process p : processes) {
            System.out.println(p.pid + "\t" + p.arrivalTime + "\t" + p.burstTime + "\t" + p.priority + "\t" +
                    p.completionTime + "\t" + p.turnaroundTime + "\t" + p.waitingTime);
        }

        System.out.printf("\nAverage Turnaround Time: %.2f", totalTAT / n);
        System.out.printf("\nAverage Waiting Time: %.2f", totalWT / n);

        sc.close();
    }
}
Example
Enter the number of processes: 3
Enter Arrival Time, Burst Time, and Priority for Process 1: 0 5 2
Enter Arrival Time, Burst Time, and Priority for Process 2: 1 3 1
Enter Arrival Time, Burst Time, and Priority for Process 3: 2 8 3


