import java.util.Arrays;
import java.util.Scanner;

class Process {
    int pid, arrivalTime, burstTime, completionTime, turnaroundTime, waitingTime;
    boolean isCompleted = false;

    Process(int pid, int arrivalTime, int burstTime) {
        this.pid = pid;
        this.arrivalTime = arrivalTime;
        this.burstTime = burstTime;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        Process[] processes = new Process[n];

        for (int i = 0; i < n; i++) {
            System.out.print("Enter Arrival Time and Burst Time for Process " + (i + 1) + ": ");
            int at = sc.nextInt();
            int bt = sc.nextInt();
            processes[i] = new Process(i + 1, at, bt);
        }

        // Sorting by Arrival Time (tie-breaker on PID for fairness)
        Arrays.sort(processes, (p1, p2) -> {
            if (p1.arrivalTime == p2.arrivalTime) 
                return Integer.compare(p1.pid, p2.pid);
            return Integer.compare(p1.arrivalTime, p2.arrivalTime);
        });

        int currentTime = 0, completed = 0;
        float totalTAT = 0, totalWT = 0;

        System.out.println("\nPID\tAT\tBT\tCT\tTAT\tWT");

        while (completed < n) {
            int minIndex = -1;
            int minBurst = Integer.MAX_VALUE;

            // Find the process with the shortest burst time that has arrived
            for (int i = 0; i < n; i++) {
                if (!processes[i].isCompleted && processes[i].arrivalTime <= currentTime) {
                    if (processes[i].burstTime < minBurst) {
                        minBurst = processes[i].burstTime;
                        minIndex = i;
                    }
                }
            }

            if (minIndex == -1) {
                // If no process is available, move time forward
                currentTime++;
            } else {
                Process p = processes[minIndex];
                p.completionTime = currentTime + p.burstTime;
                p.turnaroundTime = p.completionTime - p.arrivalTime;
                p.waitingTime = p.turnaroundTime - p.burstTime;

                totalTAT += p.turnaroundTime;
                totalWT += p.waitingTime;

                p.isCompleted = true;
                completed++;
                currentTime = p.completionTime; // Move to next process

                System.out.println(p.pid + "\t" + p.arrivalTime + "\t" + p.burstTime + "\t" +
                        p.completionTime + "\t" + p.turnaroundTime + "\t" + p.waitingTime);
            }
        }

        System.out.printf("\nAverage Turnaround Time: %.2f", totalTAT / n);
        System.out.printf("\nAverage Waiting Time: %.2f", totalWT / n);

        sc.close();
    }
}

